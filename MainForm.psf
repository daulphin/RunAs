<File version="3.2">
  <FileID>6ce3fc64-bd51-466e-b0e9-2621378708c0</FileID>
  <Preview>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
o1safwYBUhRF2bzuOQNgWaqnPdT77jebP6B79VdvNA33oG4wAKZb7cTsDPQO3pOvG135K/f5q/n9
3SrdiW49QjHEVblfX/JT9dXXhXa5bNHepcySMiFyz39XN/qGRkH0Qw2v9qOvuwulcSE4Z38Kp08d
x/r1n+DxzX4ovtSuYzKUzxpkoA89nYPbwdsAKYqibF8GMQDGlyUDMFrJOoOy/PkNurbsoLq6u5F6
ehsmv/4iXnzxRbw8awdc85vRqszC4MOAhpY1y0fm0QBQFEXZrmgA7hGJAZA6+ku8DbBncBjlGld6
BqP8LS1rkmynGBY5nm1tcg60UhRFUXdQ5m3qSKIBuEck9SImQN6xf69Itre6uhp1dXUURVHUHVRj
Y+O1zpal9tWS7gkDMByZP5yR0gMDN4Tm48pNUf3XuaovfF/HfN3vuuzh5Y1Utgyrd3d36zIkaFB6
11I3ku7p6dFpmS9pWU7SMi2S3ripTiVfyUtOFJmWeTItvXbT8nIsZB1TWvK6Vdny91ZlS/5dXV03
lC3lmMoWmco2pWVZKVumZR3ZFslT0sPLlvTwsiUt9SDLDy97eNpS2VIXpvRoypYyJG2pbPP9/ray
TZdKTOk7XbbkL9Oi0ZQteZjSlso2HYORypZ8RyrbdPxHKttUD+Zlm+pB6ut2yh5+7t2Nss3PvW8r
W9K3Ktt0DEZbtvm5Z162LGtetvm5N9qyJR/Jz5T+trJFsqz5uWdN2cPTlso2P/dGKtt0DMzLlvm3
U7b5uWdt2ZI2lSVp6WxJ22kqV/IbjWzeAAj+/v44cOAAjh07pnfUw8MDdnZ2OHPmDOrr6+Hg4IBv
vvkGrq6u+vPjx4/rz319fXUP9NChQ3r9yMhIFBcX688knZqaiszMTD0tys/PR1xcnJ6W/CoqKhAU
FKSXP3r0qN628+fP67S9vb12XefOndPLuri46PSJEyf05z4+PjeUHRERgZKSkmtlp6SkICsr61rZ
eXl5iI+Pv1Z2eXk5goOD9fJHjhzR++Xl5YWDBw/qsqWH7eTkpPOX/ZZ6OH36tP5cypZtlfUkLylb
8pPPJD8pOzc3V0/L57LfSUlJelryk/0ODw/XadlvKdvb2/uGsmV/JS1/xXmaypblZHlZT9aXfCQ/
yVfSUo7sq0xL+TIt2yNpWV+2U7ZX0rL9sh+yP/KZlCH7KfsraWdnZ70tsk2SlvqRsuU8kfVDQ0NR
WVl5rezExET9VkdT2VIHcg6Y6qGsrEyfI6aya2tr4efnp/M+efKkLtvNzU2npe6lbDkHJX3hwgV9
/OXck/Xl2FVVVV0rOyEhAYWFhdfKzs7ORlpa2rWy5dyIjo7W04cPH0ZNTY0+74eX7e7urtOOjo66
7LNnz+q0p6fnDWXLOSvnnuQjaTmni4qKrpUt5116evq1suU7ERMTc0PZAQEBOi3ns5Qt3zkpS853
Od7ynZO0fB/kc1lOlpf1ZH1T2ZKv5C/TUl5GRob+zg0vW7ZPpmUd2W7ZfknL/sh+yf5JWVKmlC3b
IGnZJlPZkpb6Gl621KfUq6ls2WfZd1PZUiemsuU4yfGS4za8bDmukrccZ6lzqXtJy3kgZcuxkbSc
J3K+mL5zch7J+WQqW86znJyca2XLeSjnhKlsOU/lfJW06XfO0vdd0qbv+6lTp3T6bn/fJT2W77tI
ppOTk/W0rG/N9/3ixYs3lH0733dZ39rv+/Dfmtv9vpeWliIqKkpPm75zY/2+SzsnJkDqzlAGQHrM
8mMgOy07ajpBpGKkoZQTQSpKDopUrJycpoMin8uJJAdF1t2/f78+2PKll+l9+/bpk0F+kGRa5skX
IzY2Vk9LfnIiBwYG6rSpbPnRkbzl5JSDID9KsqycnKaDIp/LF0N+zGTbZX35YsiPkals+RLIj5Gp
bPliyI+RqWz5Ysi+S1pOEDk55cdW8pYTRMqSH0JZVk5OScsPoXwuPxxyQpnKli+GnHDymZQnX0o5
IU1lyxdDTlhT2fLFCAkJ0Wk5oaVsOeGHly0npaTlrxwDU9mynCwv68n6ko/kJ/lKWsqRH0KZlvJl
WrZH0rK+bKdsr6Rl+2U/ZH/kMylDypb9lbTsv6RlmyQt9SNlS33J+lJ/Uo+msqV+pZ5NZUv9S9mm
epDjI8fJVLYcPzmOkrepQZDjLGk57pKWH2FJy3kh54ecJ7K+nDdy/pjKlvNKzi9T2dIIyg+zqWw5
L+X8lGk5X+W8lfNX8jY1CHJ+S1p+CKRsOQclLd+H4WVLIyw/hKbzXhph+SE0lS3nvJz7prLlh0p+
jIaXLT+EkjY1CPIjLGWZTLd89yQtP5CmH2FZXtYb/p2TfCV/mZby5EdQGuLhZcv2ybSsI9st2y/p
b/u+S1q2yVS2pG/3+y51YipbjtNov++SlmMh6bv9fZe0+W/N3f6+S3r4b81ov+8imZaGWaZlfWu+
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
ALcSDQAhhBBbhZcAhmRuAGSIQ3ZQHgfMGABCCCFGw1oDMHv2bOMaALkFsLy8nAaAEEKI4bDmEoC8
Clhel9/Z2clLAJZEA0AIIcRWsSYIUN4DEBwcbFwDwHcBEEIIMSq8BDAkcwMgysjI0Dsm05YqYSTR
ABBCCLFVrDEA8iAgeReApA0ZA+Dp6YnCwkLGABBCCDEc1sQA1NfX65flScNvyEsAjAEghBBiVMZq
AORlQNI5dnV1Ne6DgBYvXoyIiAg9bakSRhINACGEEFvF2hgAwz4HQHaquLiYrwMmhBBiSKwxADEx
MfqNuZI2nAGQIY5Tp04hKytLT5tXwGhEA0AIIcRWGasBkE5xc3Ozfh9Ae3u7MWMAeBsgIYQQo2JN
DIAEAB49ehTd3d3GjAFYtWqVvtVBsFQJI8lkAMLCY/Q0RVEURdmKQsKixnwJwNC3AcoQh7wHQD6z
JgagorIaru4XERAYRlEURVE2I1d3b1RX147JACQkJGD16tU6bTgDII333r17kZycrHdWhjxEYgbk
uQAyLX8tpU3LSrq7uwetqlKaW1rR2NSMxsYmPa3Tanp4ukHSaplr6YZGNJnSzS2DafV3eFr+Slrm
35BW6+m0LKsk+Ur+19JmZev08LJV+p4uu3kwL52+62UPS49UduMIZZulx172yOfeSGXfVj0ML0ul
R1+2St/lsm84/vdy2ZKWZZUk3xu2ZaSyVfpula3T33XZ98r3faSyzdJjL3t037nWtnb0DXV4Te2Y
aKR2TdpIafCrq6uNGwOwYMEC/UIguc9RHnogdwTI9Y6mpiadlr+SlvmSlqAISTc0NOi05Cvp5map
7Cb9zOSensH1B9ft0nmb0j09PWqZDj0t64izksodTDerg9CLNrV9kpa85aDIX0nLfPlclpO0rCfr
Xy+7Q+cv0yIpt/uGsrv19sn0LctWB1fS5mVLnd122WrfTekbylbq7e1Bxwhly3GV9GDZaluuld12
Q9lyUt5c9vBjcL1skS67Y1jZKq8Ry24ZKlstN1j2YHo0ZXd1DStbLSvryLTkIXndXPbg8TcvW5Yz
L1vyk2mRlPNtZct2mpct+yNpKcNy2UPnnlpO6ul62XL8r5ct9Xtz2Tee99fLNp17Q2WrPG8s2+y8
l7KHnXty3kjZch5J+rv4zl0re+gY3Krsm8/7O/h9bxvDd+6msu+/73uPmjaVLbLq+36t7MH0SGXr
8/6msv/y33dpv2RbpczRtnPSRsptgFu3btV5GTIGYNOmTXoE4JtvvsGnn36qr3fI2wFlvqRXrFiB
qqoqLF26VKe3bdumP581axY++eQTHDlyBHl5efj888912s3NDYmJiXr6448/RmhoKAIDA/W0zJOy
nJ2d9bSsU1BQgEOHDum0PHNZ8t6yZYsua/ny5brsZcuW6bTMl89lOVle1pP1TWVLvpK/TEt5QUFB
CAkJuVa2bJdsn0zLOrLdsv2Slv2RvGX/pCzZXylb9n/69Om6PuRzqR/53M7OTj8k4osvvtDrOzk5
ITU19VrZss8SXGkqW4aSzp8/r6c/++wz5OTk4NixY9fKLisrw44dO3TeS5Ys0ZdmJD5Dyt6wYYN+
KYU8tEk+379//w1lOzg4IC0t7VrZfn5++tkOprLlbVbyxEeZlvyk7BMnTuj0zJkzdZTr119/rfOW
W16kbBn2krSULWkxipKWESO5dXTGjBl6/TNnzujHSctnUp6Pj4/+0pjKjo2NxcWLF6+VLXecnD59
Wqe//PJLlJSUYPfu3Xr9hQsX6rLWrl2r0+vWrbuhbFlOlpf1ZH3JR/KTfCUt5cg1O5kWybS3t7ee
lvVlO2V7JS3bL/sh+yOfSRlSx+vXr9fpNWvW6LJlmyQt9SP1JPUl60v9ST2aypb6lXqWadn3yMhI
+Pr6XqsHOT5ynGRajpscPzmOkrccVylb6lrSUvdStjyjQ9JyXsj5YfrOyXkjZct5JGk5r+T8MpUt
511AQMC1suW8lPNzeNly/kre5t/3lStX6rJN3/ft27frz8f6fU9JSRnz9930WyPLSfp2v+9JSUn6
IS6mskf7fZf05s2b9edyD7ikb/f7LnXi7u6up2/n+y7pjRs3WvV9j4+Pv/ZbM5bvu5QtweGS3rdv
321/3728vK6VLUF0cqeZpG/3+75nzx5d9li/75mZmbC3t9fp2/2+79q1S9fTe++9p5cRY2IoA2Aa
8pCdMTkh2cG6urprTkjS0tOXtLgiSZuckywnaXFK4qxkWiR5i/s0pcU5i0xp+UyWMaVlXclDpm2p
bClT0rINkra2bDlxrC3bVA9yrGR907bIsR1ethxTKc+UNp20prSsK+vItKls0/EfTdmSvhtlmx9/
S2UPPwYjlS3baStly7rmZZuOv3nZozn3hpdtzXk/lrKHH/97tWzTMTAdf2vLluNhbdmmepDzRNY3
bYucR8PLHunck3VHe95bKlvSd6Ns8+Nvqezhx2CksmU7rSnbVOemY2uYSwByIsqQhuygDLHIjstf
GRUQUyBp+TuatGl9mTalJW9TWqbN06ayREYqe3jaUtnD07KsLZU92m35Lss2T98LZd9qW+5k2eZp
Wypb0t9WtkwbtezhaUtlD0/LsrZU9mi35bss2zx9r5Qt86T9NIQBEEdTW1urd4aiKIqiqG+XtJnS
dt7TBkAkG09RFEVR1O1JLgXIX0ttqyXZnAGgKIqiKOrOiwaAoiiKou5D0QBQFEVR1H0oGgCKoiiK
ug9FA0BRFEVR96FoACiKoijqPhQNAEVRFEXdh6IBoCiKoqj7UDQAFEVRFHUfigaAoiiKou5D0QBQ
FEVR1H0oGgCKoiiKug9FA0BRFEVR96FoACiKoijqPhQNAEVRFEXdh6IBoCiKoqj7UDQAFEVRFHUf
6q4YgLa2wYIoiqIoirINSdt8xwyAKL+6DSWXWnUhFEVRFEXZiFTbLG10jlm7/Z0ZAJG4C4qiKIqi
bEuW2uzv1ABQFEVRFHVviAaAoiiKou5D0QBQFEVR1H2o2zYAlbVNKGvo0ytSFEVRFHVvqlS15dWX
W0dnACZNeqetuKwGNXVt2jVQFEVRFHVvShr/0orLmDxlStdQM39rXnvttZJp06a1TJ0qmkpRFEVR
1D2raS3Tpr3X8vrrr5cPNfOEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEJshf/yX/5/Pxp9i6Wppt8AAAAASUVORK5CYII=</Preview>
  <Form>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</Form>
  <Code><![CDATA[


$formAdminRunAsV02_Load = {
	$ltv_app_list.View = 'LargeIcon'
	#TODO: Initialize Form Controls here
	Set-ControlTheme $formAdminRunAsV02 -Theme Dark
	Add-Type -AssemblyName System.Drawing
	$domain = $env:USERDOMAIN + "\"
	$txt_username.Text=$domain
	$txt_username.Enabled = $false
	$txt_password.Enabled=$false
	$global:datastorefolder = $null
	$global:datastorefolder = $Env:APPDATA + "\admin_run"
	#$global:datastorefolder ="c:\temp\test"
	if (!(Test-Path -Path $global:datastorefolder))
	{
		New-Item $global:datastorefolder -Type Directory
	}
	
	$global:applist = $global:datastorefolder + "\app_list.csv"
	
	if (!(Test-Path -Path $global:applist))
	{
		New-Item  $global:applist
		$newline = "{0},{1},{2},{3},{4},{5}" -f "EXE_CName","EXE_Name", "EXE_Folder", "EXE_Path","EXE_Aruguments", "EXE_Image"
		$newline | Add-Content -Path $global:applist
	}
	
	if ((Test-Path -Path $global:applist))
	{
		$appicons = Get-ChildItem $global:datastorefolder | Where { $_.extension -like ".jpg" }
		foreach ($appicon in $appicons)
		{
			$tempimage = $global:datastorefolder + "\" + $appicon
			Write-Host $tempimage
			$imagefile = [System.Drawing.Image]::FromFile($tempimage)
			$imagefile.Tag= $appicon
			$imagelist_icons.Images.Add($appicon.Name.ToString(), $imagefile)
			$appicon=$null
			$imagefile.Dispose()
		}
		$appicons="null"
		#$test= $imagelist_icons.Images.IndexOfKey("paintdotnet.jpg")
		#foreach ($thing in $imagelist_icons.Images)
		#{
		#		Write-Host $thing.tag
		#		Write-Host "========"
		#}
		
		
		
		$ltv_app_list.BeginUpdate()
		$ltv_app_list.Clear()
		$applist = Import-Csv  $global:applist
		$ltv_app_list.LargeImageList = $imagelist_icons
		
		
		foreach ($app in $applist)
		{
			#[void]$dgv_app_list.Rows.Add($app.EXE_Image,$app.EXE_Name,"Delete")
			$item = New-Object System.Windows.Forms.ListViewItem
			$item.Text = $app.EXE_CName
			$item.Name = $app.EXE_Name
			$item.SubItems.Add($app.EXE_Folder)
			$item.SubItems.Add($app.EXE_Path)
			$item.SubItems.Add($app.EXE_Aruguments)
			$item.SubItems.Add($app.EXE_Image)
			$item.ImageIndex = $imagelist_icons.Images.IndexOfKey($app.EXE_Image)
			#$item.ImageKey = $app.EXE_Name
			$ltv_app_list.Items.Add($item)
			$dgv_remove.Rows.Add($app.EXE_cName, "Delete")
		}
		$ltv_app_list.EndUpdate()
	}
	
	$ltv_app_list.Sorting  = 'Ascending'
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formAdminRunAsV02 -Theme Dark
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formAdminRunAsV02 -Theme Light
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

$labelDomainUserName_Click={
	#TODO: Place custom script here
	
}

$buttonSelectFile_Click = {
	Add-Type -AssemblyName System.Drawing
	#TODO: Place custom script here
	$txt_exe_name.text = ""
	$txt_exe_path.Text = ""
	$txt_exe_cname.Text = ""
	$txt_exe_arguments.Text = ""
	$pic_temp_icon.Image=$null
	$global:iconsavepath = $global:datastorefolder + "\temp.bmp"
	Remove-Item -Path $global:iconsavepath -ErrorAction SilentlyContinue
	$global:iconsavepath_jpg = $global:datastorefolder + "\temp.jpg"
	Remove-item -path $global:iconsavepath_jpg -ErrorAction SilentlyContinue
	$openfiledialog1.ShowDialog()
	$file = $openfiledialog1.FileName
	$selectedfile= Get-ItemProperty $file
	$txt_exe_name.text = $selectedfile.name
	$txt_exe_path.Text = $selectedfile.directory
	$cnamraw=($txt_exe_name.Text).split(".")
	$txt_exe_cname.Text=$cnamraw[0]
	
	$icon = [System.Drawing.Icon]::ExtractAssociatedIcon($file)
	$icon.ToBitmap().save($global:iconsavepath)
	$icon.Dispose()
	$icon_jpg = new-object System.Drawing.Bitmap($global:iconsavepath);
	$icon_jpg.Save($global:iconsavepath_jpg)
	$icon_jpg.Dispose()
	
	if (Test-Path $global:iconsavepath)
	{
		$global:temp_img = [System.Drawing.Image]::Fromfile($global:iconsavepath_jpg);
		$pic_temp_icon.Image = $global:temp_img
		$pic_temp_icon.SizeMode = 'StretchImage'
		#$global:temp_img.Dispose()
	}
	

	Remove-item -path $global:iconsavepath -Force
	
}

$menustripTheme_ItemClicked=[System.Windows.Forms.ToolStripItemClickedEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.ToolStripItemClickedEventArgs]
	#TODO: Place custom script here
	
}

$buttonADD_Click={
	#TODO: Place custom script here
	
	if ($txt_exe_name.Text -like  "*.*")
	{
		$simpleimagenametemp = ($txt_exe_name.Text).split(".")
		$simpleimagenamefinale = $simpleimagenametemp[0] + ".jpg"
		#$simpleimagenamefinale_bmp = $simpleimagenametemp[0] + ".bmp"
		#$bmptarget= $global:datastorefolder + "\" + $simpleimagenamefinale_bmp
		#Copy-Item $global:iconsavepath -destination $bmptarget
	}
	else
	{
		$simpleimagenamefinale = $txt_exe_name.Text
	}
	$imagesave= $global:datastorefolder + "\" + $simpleimagenamefinale
	$pic_temp_icon.Image.Save($imagesave) 
	#$imagelist_icons.Images.Add([System.Drawing.Image]::FromFile($imagesave))
	$imagefile = [System.Drawing.Image]::FromFile($imagesave)
	$imagelist_icons.Images.Add($simpleimagenamefinale, $imagefile)
	
	$fullexepath = $txt_exe_path.Text + "\" + $txt_exe_name.Text
	$arguments= $txt_exe_arguments.Text
	$newline = "{0},{1},{2},{3},{4},{5}" -f $txt_exe_cname.Text,$txt_exe_name.Text, $txt_exe_path.Text, $fullexepath,$arguments,$simpleimagenamefinale
	$newline | Add-Content -Path $global:applist
	
	$item = New-Object System.Windows.Forms.ListViewItem
	$item.Text = $txt_exe_cname.Text
	$item.Name = $txt_exe_name.Text
	$item.SubItems.Add($txt_exe_path.Text)
	$item.SubItems.Add($fullexepath)
	$item.SubItems.Add($arguments)
	$item.SubItems.Add($simpleimagenamefinale)
	#$item.ImageKey = $simpleimagenamefinale
	$item.ImageIndex = $imagelist_icons.Images.IndexOfKey($simpleimagenamefinale)
	
	
	$ltv_app_list.Items.Add($item)
	
	

	
	$pic_temp_icon.Image=$null
	$global:temp_img.dispose()
	#$global:iconsavepath.dispse()
	Remove-item -path $global:iconsavepath_jpg -force -ErrorAction SilentlyContinue
	Remove-item -path $global:iconsavepath -Force -ErrorAction SilentlyContinue
	
	
	$dgv_remove.Rows.Add($txt_exe_cname.Text, "Delete")
	
	$ltv_app_list.BeginUpdate()
	$ltv_app_list.Clear()
	$applist = Import-Csv  $global:applist
	$ltv_app_list.LargeImageList = $imagelist_icons
	
	$txt_exe_name.Text = ""
	$txt_exe_path.Text = ""
		
	foreach ($app in $applist)
	{
		#[void]$dgv_app_list.Rows.Add($app.EXE_Image,$app.EXE_Name,"Delete")
		$item = New-Object System.Windows.Forms.ListViewItem
		$item.Text = $app.EXE_cName
		$item.Name = $app.EXE_Name
		$item.SubItems.Add($app.EXE_Folder)
		$item.SubItems.Add($app.EXE_Path)
		$item.SubItems.Add($app.EXE_Aruguments)
		$item.SubItems.Add($app.EXE_Image)
		$item.ImageIndex = $imagelist_icons.Images.IndexOfKey($app.EXE_Image)
		#$item.ImageKey = $app.EXE_Name
		$ltv_app_list.Items.Add($item)
	}
	$ltv_app_list.EndUpdate()
	
	$ltv_app_list.Sorting = 'Ascending'
	
}

#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ListBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}



function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}



function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}



function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}



function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterCIMProperties
			This switch removes CIM properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterCIMProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterCIMProperties -or -not $prop.Name.StartsWith('__')) #filter out CIM properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)
}


#endregion

$dgv_app_list_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	
}




$ltv_app_list_MouseDoubleClick=[System.Windows.Forms.MouseEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.MouseEventArgs]
	#TODO: Place custom script here
	
	
	foreach ($item in $ltv_app_list.SelectedItems)
	{
		Write-Host $Item.text
		$exedir = $item.SubItems[1].Text
		$exepath = $item.SubItems[2].Text
		$exeargs = $item.SubItems[3].Text
		
		$username = $txt_username.Text
		$password = $txt_password.Text
		
		
		if ($chk_cred_enable.Checked -eq $true)
		{
			
			$credentials = New-Object System.Management.Automation.PSCredential -ArgumentList @($username, (ConvertTo-SecureString -String $password -AsPlainText -Force))
			try
			{
				if ($exeargs)
				{
					Start-Process -FilePath $exepath -ArgumentList $exeargs -WorkingDirectory $exedir -Credential $credentials
				}
				else
				{
					Start-Process -FilePath $exepath -WorkingDirectory $exedir -Credential $credentials
				}
			}
			catch
			{
				$errormessage = $_.Exception.message
				Write-Host $errormessage
				[System.Windows.Forms.MessageBox]::Show($errormessage)
			}
			
		}
		else
		{
			if ($exeargs)
			{
				Start-Process -FilePath $exepath -WorkingDirectory $exedir -ArgumentList $exeargs
			}
			else
			{
				Start-Process -FilePath $exepath -WorkingDirectory $exedir
			}
			
		}
	}
	
	
}

$ltv_app_list_SelectedIndexChanged={
	#TODO: Place custom script here
	
}

$bindingsource1_CurrentChanged={
	#TODO: Place custom script here
	
}

$dgv_remove_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	if ($_.columnIndex -eq 1)
	{
		$rowindex = $dgv_remove.CurrentRow.Index
		$apptoremove = $dgv_remove.Rows[$rowindex].Cells[0].Value
		(Get-Content $global:applist) | Where-Object { $_ -NotMatch $apptoremove } | Set-Content $global:applist
		
		$apptoremovetemp = ($apptoremove).split(".")
		$apptoremovefinale = $global:datastorefolder + "\" + $apptoremovetemp[0] + ".jpg"
		if (Test-Path  $apptoremovefinale)
		{
			Remove-Item $apptoremovefinale -Force -ErrorAction SilentlyContinue
		}
	
		$dgv_remove.Rows.RemoveAt($dgv_remove.CurrentRow.Index)
		
		$dgv_remove.Rows.Clear()
		$ltv_app_list.BeginUpdate()
		$ltv_app_list.Clear()
		$applist = Import-Csv  $global:applist
		$ltv_app_list.LargeImageList = $imagelist_icons
		
		foreach ($app in $applist)
		{
			#[void]$dgv_app_list.Rows.Add($app.EXE_Image,$app.EXE_Name,"Delete")
			$item = New-Object System.Windows.Forms.ListViewItem
			$item.Text = $app.EXE_cName
			$item.Name = $app.EXE_Name
			$item.SubItems.Add($app.EXE_Folder)
			$item.SubItems.Add($app.EXE_Path)
			$item.SubItems.Add($app.EXE_Aruguments)
			$item.SubItems.Add($app.EXE_Image)
			$item.ImageIndex = $imagelist_icons.Images.IndexOfKey($app.EXE_Image)
			#$item.ImageKey = $app.EXE_Name
			$ltv_app_list.Items.Add($item)
			$dgv_remove.Rows.Add($app.EXE_Name, "Delete")
		}
		$ltv_app_list.EndUpdate()
		
		$ltv_app_list.Sorting = 'Ascending'
		
		$dgv_remove.Refresh();
	}
	
}

$chk_cred_enable_CheckedChanged={
	#TODO: Place custom script here

		$txt_username.Enabled = $chk_cred_enable.Checked
		$txt_password.Enabled = $chk_cred_enable.Checked

}
]]></Code>
  <Bookmarks />
  <BreakPoints>
    <Line Disabled="True">313</Line>
    <Line Disabled="True">407</Line>
    <Line Disabled="False">433</Line>
    <Line Disabled="False">473</Line>
    <Line Disabled="False">512</Line>
    <Line Disabled="True">1089</Line>
  </BreakPoints>
  <TracePoints />
  <Mode>0</Mode>
  <Assemblies />
</File>